utlity_data = mydata[1:100]
mydata <- read.csv("/Users/rituc/lv_reco/data/investorprofileactivity.csv"
)
utlity_data = mydata[1:100]
mydata
utlity_data = mydata[1:100, ]
utlity_data
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from utlity_data group by user_id, profile_id")
library(reshape)
library(sqldf)
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from utlity_data group by user_id, profile_id")
agg_data
M <- cast(agg_data, user_id~profile_id)
M
utlity_data = mydata
utlity_data
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from utlity_data group by user_id, profile_id")
M <- cast(agg_data, user_id~profile_id)
Vs = cast(agg_sector, sector~id)
M <- cast(agg_data, user_id~profile_id)
M
utlity_data = mydata
utlity_data
names(agg_data)
names(mydata)
agg_data
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from utlity_data group by user_id, profile_id")
agg_data
M <- cast(agg_data, user_id~profile_id)
M
LU = decompose(M)
LU = decompose(M, tol=1e-07)
LU = decompose(M)
LU = decompose(M)
svd
svd(M, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)
sectors <- read.csv("/Users/rituc/lv_reco/data/stsectors.csv")
sector1 <- sectors
agg_sector <-sqldf("select id, sector, count(created_at) as sector_count from sector1 group by id, sector")
Vs = cast(agg_sector, sector~id)
source('~/lv_reco.R')
getwd()
tr_data<-read.csv("investorprofileactivity.csv",header=TRUE)
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from tr group by user_id, profile_id")
g<-dcast(agg_data, user_id ~ profile_id)
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(sqldf)
tr_data<-read.csv("investorprofileactivity.csv",header=TRUE)
head(tr_data)
tr_data<-tr_data[,-c(1)]
agg_data <-sqldf("select user_id, profile_id, count(created_at) as startup_count from tr group by user_id, profile_id")
g<-dcast(agg_data, user_id ~ profile_id)
class(g)
R<-as.matrix(g)
r <- as(R, "realRatingMatrix")
as(r, "list")
as(r, "matrix")
#head(as(r, "data.frame"))
r_m <- normalize(r)
as(r_m, "list")
image(r, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
r_b <- binarize(r, minRating=1)
as(r_b, "matrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5, minRating=1))
#rec=Recommender(r[1:nrow(r)],method="POPULAR")
print(rec)
names(getModel(rec))
getModel(rec)$nn
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
recrecom
rec
print(rec)
names(getModel(rec))
getModel(rec)$nn
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
as(recom, "list"
)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Ritu Choudhary")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
name <- c("abc", "apple", "mango")
name
number = nchar(name)
number
number
number == 5
number == 3
number
name[numbe == 5]
name[number == 5]
name[number == 3]
udacious[mystery == 11]
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
names(mtcars)
?mtcars
?mtcars
?"names"
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars)
mtcars
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
mtcars
tail(mtcars, 3)
head(mtcars, 10)
head(mtcars, 1)
mtcars$mpg
names(mtcars)
mtcars$cyl
mean(mtcars$mpg)
?mean
getwd
getwd
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("randomForest")
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("ggthemes")
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("dplyr")
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("mice")
training_set <- read.csv('train.csv', stringsAsFactors = F)
test_set <- read.csv('test.csv', stringsAsFactors = F)
setwd("/Users/rituc/machine_learning/titanic_survival/")
training_set <- read.csv('train.csv', stringsAsFactors = F)
test_set <- read.csv('test.csv', stringsAsFactors = F)
training_set.head()
training_set.head
training_set
training_set.col
full_data_set <- bind_rows(training_set, test_set)
full_data_set
full_data_set.names
colnames(full_data_set)
View(full_data_set)
training_set
View(full_data_set)
ggplot(training_set, aes(x = Name, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
data <- bind_rows(training_set, test_set)
data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
data$Title
table(full$Sex, full$Title)
table(data$Sex, data$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
data$Title[data$Title == 'Mlle']        <- 'Miss'
data$Title[data$Title == 'Ms']          <- 'Miss'
data$Title[data$Title == 'Mme']         <- 'Mrs'
data$Title[data$Title %in% rare_title]  <- 'Rare Title'
table(data$Sex, data$Title)
data$Surname <- sapply(data$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
data$Surname
data[1]
data
data[1:1]
data[1:]
data[1:2]
data[1:4]
data[1][1]
data[1,]
data[1,][2]
data[1,][4]
data[1,][4].split(',.')
strsplit(data[1,][4], split = '[,.]')
strsplit(data[1,][4], split = ',.')
strsplit(data[1,][4][1], split = ',.')
data[1,][4]
data[1,][4][1]
data[1,][4][1]
data[1,][4][1]
nlevels(factor(data$Surname))
unique_surnames = nlevels(factor(data$Surname))
unique_surnames
print unique_surnames
print(unique_surnames)
View(full_data_set)
table(data$Survived, data$Surname)
# Create a family size variable including the passenger themselves
data$Fsize <- data$SibSp + data$Parch + 1
data$Family <- paste(data$Surname, data
$Fsize, sep='_')
data$Family
ggplot(data[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
data$Family <- paste(data$Surname, data$Fsize, sep='_')
data$Family <- paste(data$Surname, data$Fsize, sep='_')
data$Fsize
data$Fsize
# Discretize family size
data$FsizeD[data$Fsize == 1] <- 'singleton'
data$FsizeD[data$Fsize < 5 & data$Fsize > 1] <- 'small'
data$FsizeD[data$Fsize > 4] <- 'large'
data
data$FsizeD
table(data$FsizeD)
table(full$FsizeD, full$Survived)
table(data$FsizeD, data$Survived)
table(data$FsizeD, data$Survived)
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
mosaicplot(table(data$FsizeD, data$Survived), main='Family Size by Survival', shade=TRUE)
data$Cabin
data$Cabin
strsplit(full$Cabin[2], NULL)[[1]]
strsplit(data$Cabin[2], NULL)[[1]]
data$Cabin[2]
strsplit(data$Cabin[2], NULL)
data$Deck <- factor(sapply(data$Cabin, function(x) strsplit(x, split = NULL)[[1]][1]))
table(data$Deck )
table(data$Survival, data$Deck )
table(data$Survived, data$Deck )
data[c(62, 830), 'Embarked']
data
View(full_data_set)
